% constraints on 6(1_left); 9(1_right); 17(4_left); 20(4_right); on Z axis
% pay attention on absolute follower
% leg ups to Z coordinate
constraint = [SymbolicEngine.LinkArray(6).AbsoluteFollower(3); SymbolicEngine.LinkArray(9).AbsoluteFollower(3); ... 
    SymbolicEngine.LinkArray(17).AbsoluteFollower(3); SymbolicEngine.LinkArray(20).AbsoluteFollower(3);];

description = SRD_generate_second_derivative_Jacobians('SymbolicEngine', SymbolicEngine, ...
    'Task',                                   constraint, ...
    'Casadi_cfile_name',                     'g_Constraints', ...
    'Symbolic_ToSimplify',                    true, ...
    'Symbolic_UseParallelizedSimplification', false, ...
    'Symbolic_ToOptimizeFunctions',           true, ...
    'FunctionName_Task',                     'g_Constraint', ...
    'FunctionName_TaskJacobian',             'g_Constraint_Jacobian', ...
    'FunctionName_TaskJacobian_derivative',  'g_Constraint_Jacobian_derivative', ...
    'Path',                                  'Constraints/');


Handler_Constraints_Model = SRD_get_handler__Constraints_model('description', description, ...
    'dof_robot', SymbolicEngine.dof);
SRD_save(Handler_Constraints_Model, 'Handler_Constraints_Model');

%%
%Inverse Kinematics

% Joints include all without jounts from constraint
Task = [SymbolicEngine.q(1); SymbolicEngine.q(2); constraint]; 

description = SRD_generate_second_derivative_Jacobians('SymbolicEngine', SymbolicEngine, ...
    'Task',                                      Task, ...
    'Casadi_cfile_name',                         'g_InverseKinematics', ...
    'Symbolic_ToSimplify',                       true, ...
    'Symbolic_UseParallelizedSimplification',    false, ...
    'Symbolic_ToOptimizeFunctions',              true, ...
    'FunctionName_Task',                         'g_InverseKinematics_Task', ...
    'FunctionName_TaskJacobian',                 'g_InverseKinematics_TaskJacobian', ...
    'FunctionName_TaskJacobian_derivative',      'g_InverseKinematics_TaskJacobian_derivative', ...
    'Path',                                      'InverseKinematics/');

Handler_IK_Model = SRD_get_handler__IK_model('description', description, ...
    'dof_robot', SymbolicEngine.dof);
SRD_save(Handler_IK_Model, 'Handler_IK_Model');