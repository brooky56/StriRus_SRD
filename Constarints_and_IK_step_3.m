% constraints second variant 
constraint = ...
[   SymbolicEngine.LinkArray(17).RelativeFollower(3); SymbolicEngine.LinkArray(19).RelativeFollower(3); SymbolicEngine.LinkArray(21).RelativeFollower(3); ...
    SymbolicEngine.LinkArray(9).RelativeFollower(3); SymbolicEngine.LinkArray(7).RelativeFollower(3); SymbolicEngine.LinkArray(5).RelativeFollower(3);];

description = SRD_generate_second_derivative_Jacobians('SymbolicEngine', SymbolicEngine, ...
    'Task',                                   constraint, ...
    'Casadi_cfile_name',                     'g_Constraints', ...
    'Symbolic_ToSimplify',                    true, ...
    'Symbolic_UseParallelizedSimplification', false, ...
    'Symbolic_ToOptimizeFunctions',           true, ...
    'FunctionName_Task',                     'g_Constraint', ...
    'FunctionName_TaskJacobian',             'g_Constraint_Jacobian', ...
    'FunctionName_TaskJacobian_derivative',  'g_Constraint_Jacobian_derivative', ...
    'Path',                                  'Constraints/');


Handler_Constraints_Model = SRD_get_handler__Constraints_model('description', description, ...
    'dof_robot', SymbolicEngine.dof);
SRD_save(Handler_Constraints_Model, 'Handler_Constraints_Model');

%%
%Inverse Kinematics
rC = SRD_get_CoM_ForLinkArray('SymbolicEngine', SymbolicEngine);
% Joints include all without joints from constraint
Task = [rC(1); constraint];  

description = SRD_generate_second_derivative_Jacobians('SymbolicEngine', SymbolicEngine, ...
    'Task',                                      Task, ...
    'Casadi_cfile_name',                         'g_InverseKinematics', ...
    'Symbolic_ToSimplify',                       true, ...
    'Symbolic_UseParallelizedSimplification',    false, ...
    'Symbolic_ToOptimizeFunctions',              true, ...
    'FunctionName_Task',                         'g_InverseKinematics_Task', ...
    'FunctionName_TaskJacobian',                 'g_InverseKinematics_TaskJacobian', ...
    'FunctionName_TaskJacobian_derivative',      'g_InverseKinematics_TaskJacobian_derivative', ...
    'Path',                                      'InverseKinematics/');

Handler_IK_Model = SRD_get_handler__IK_model('description', description, ...
    'dof_robot', SymbolicEngine.dof);
SRD_save(Handler_IK_Model, 'Handler_IK_Model');

%% IK Task for second version (replace in 4 step)
ZeroOrderDerivativeNodes = {IC_Task(1), IC_Task(1) + 0.05;   % CoM chages
                            
                            IC_Task(2), IC_Task(2);          % Leg 3-L Z-axis
                            IC_Task(3), IC_Task(3);          % Leg 4-R Z-axis
                            IC_Task(4), IC_Task(4);          % Leg 5-L Z-axis
                            
                            IC_Task(5), IC_Task(5);          % Leg 2-R Z-axis
                            IC_Task(6), IC_Task(6);          % Leg 1-L Z-axis
                            IC_Task(7), IC_Task(7)};         % Leg 0-R Z-axis
                            % constraints
                     
FirstOrderDerivativeNodes = {0, 0; % 0
                             0, 0;
                             0, 0;
                             0, 0;
                             
                             0, 0;
                             0, 0;
                             0, 0};
                         
SecondOrderDerivativeNodes = {0, 0; % 0 
                              0, 0;
                              0, 0;
                              0, 0;
                              
                              0, 0;
                              0, 0;
                              0, 0};